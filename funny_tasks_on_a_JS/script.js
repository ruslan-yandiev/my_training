/*
Результатом декоратора debounce(f, ms) должна быть обёртка, 
которая передаёт вызов f не более одного раза в ms миллисекунд. 
Другими словами, когда мы вызываем debounce, 
это гарантирует, что все остальные вызовы будут игнорироваться в течение ms.

На практике debounce полезен для функций, которые получают/обновляют данные, 
и мы знаем, что повторный вызов в течение короткого промежутка времени не даст ничего нового. 
Так что лучше не тратить на него ресурсы.
*/
// function debounce(f, ms) {
//   let detect = true;

//   return function (arg) {
//     if (detect) {
//       f(arg);
//       detect = false;
//     }

//     setTimeout(() => (detect = true), ms);
//   };
// }

// let f = debounce(console.log, 1000);

// f(1); // выполняется немедленно
// f(2); // проигнорирован

// setTimeout(() => f(3), 100); // проигнорирован (прошло только 100 мс)
// setTimeout(() => f(4), 1100); // выполняется
// setTimeout(() => f(5), 1500); // проигнорирован (прошло только 400 мс от последнего вызова)
// setTimeout(() => f(6), 2300); // выполняется

//* =======================================================================================================================
/*
  Даны даты заезда и отъезда каждого гостя. Для каждого гостя дата заезда строго раньше даты отъезда 
  (то есть каждый гость останавливается хотя бы на одну ночь). 
  В пределах одного дня считается, что сначала старые гости выезжают, 
  а затем въезжают новые. Найти максимальное число постояльцев, которые одновременно проживали в гостинице 
  (считаем, что измерение количества постояльцев происходит в конце дня).

sample = [ [1, 2], [1, 3], [2, 4], [2, 3], ] // 4  (второго числа прожи)
*/
function findMax(arr) {
  const obj = {};

  for (let i = 0; i < arr.length; i++) {
    for (let j = arr[i][0]; j < arr[i][1] + 1; j++) {
      if (obj[j]) {
        obj[j] += 1;
      } else {
        obj[j] = 1;
      }
    }
  }

  console.log();

  return Math.max(...Object.values(obj));
}

console.log(
  findMax([
    [1, 2],
    [1, 3],
    [2, 4],
    [2, 3],
  ])
);
// =========================================================================
