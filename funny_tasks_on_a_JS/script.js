/*
Результатом декоратора debounce(f, ms) должна быть обёртка, 
которая передаёт вызов f не более одного раза в ms миллисекунд. 
Другими словами, когда мы вызываем debounce, 
это гарантирует, что все остальные вызовы будут игнорироваться в течение ms.

На практике debounce полезен для функций, которые получают/обновляют данные, 
и мы знаем, что повторный вызов в течение короткого промежутка времени не даст ничего нового. 
Так что лучше не тратить на него ресурсы.
*/
// function debounce(f, ms) {
//   let detect = true;

//   return function (arg) {
//     if (detect) {
//       f(arg);
//       detect = false;
//     }

//     setTimeout(() => (detect = true), ms);
//   };
// }

// let f = debounce(console.log, 1000);

// f(1); // выполняется немедленно
// f(2); // проигнорирован

// setTimeout(() => f(3), 100); // проигнорирован (прошло только 100 мс)
// setTimeout(() => f(4), 1100); // выполняется
// setTimeout(() => f(5), 1500); // проигнорирован (прошло только 400 мс от последнего вызова)
// setTimeout(() => f(6), 2300); // выполняется

//* =======================================================================================================================
/*
Даны две строки.
Написать функцию, которая вернёт True, если из первой строки можно получить вторую, совершив не более 1 изменения 
(== удаление / замена символа).
*/

//! собес #6
/*
Функция принимает массив банеров (объектов как в примере) и число, обозначающее количество банеров,
которое нужно выбрать из массива. Необходимо реализовать функцию так, чтобы функция выбирала переданное
количество случайных банеров (банеры уникальны, не должны повторяться в результате), учитывая их вес
(свойство weight в объектах банеров). Чем больший вес имеет банер, тем больше шансов того, что этот банер
должен быть выбран.
Если массив банеров содержит меньше или столько же элементов, сколькко было запрошено, то функция должна
вернуть все элементы массива.
*/
// !реализовать поиск со сложностью O(log n)
function selectBanners(banners, num) {
    if (banners.length <= num) return banners;

    const collectionID = banners.reduce((arr, obj) => {
        for (let i = 0; i < obj.weight; i++) arr.push(obj.id);
        return arr;
    }, []);

    const randCollection = new Set();

    for (let i = 0; num > randCollection.size;) {
        randCollection.add(collectionID[Math.floor(Math.random() * (collectionID.length))]);
    }

    return banners.filter((obj) => randCollection.has(obj.id));
}

const banners = [
    { id: 2, weight: 10 },
    { id: 4, weight: 5 },
    { id: 8, weight: 15 },
    { id: 22, weight: 18 },
    { id: 41, weight: 41 },
    { id: 53, weight: 1 },
    { id: 69, weight: 9 },
];

console.log(selectBanners(banners, 3));