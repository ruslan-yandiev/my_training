import { useMemo } from "react";
/*
! Хук useMemo(callback, deps)
первым аргументом принимает функцию колбе. вторым принимает массив зависимостей. Осуществляем кэширования результата вычислений (разновидность патерна Декоратор). Нужно импортировать из React
Переданная функция колбек должна возвращать результат каких то вычислений/
К примеру она поможет не отрисовывать каждый раз отсортированный массив и достанет уже отсартированный массив из кеша. Но каждый раз когда какая то из зовисимосте в массиве deps изменилась то функция вновь пересчитывает и кэширует результат вычисления.
Если массив зависимосте пустой, то функция отработает лишь единожды, запомнит результат и больше вызвана не будет.
*/

// Отсортировываем массив постов
export const useSortedPosts = (posts, sort) => {
  return useMemo(() => sort ? [...posts].sort((a, b) => a[sort].localeCompare(b[sort])) : posts, [sort, posts]); // localeCompare - функуия используется для сравнения строк при сортировке. sort изменяет объект при вызове, по этому делаем копию [...obj]
};

export const usePosts = (posts, sort, query) => {
  const sortedPosts = useSortedPosts(posts, sort);
  // Отфильтровываем отсортированный массив постов
  return useMemo(() => sortedPosts.filter((post) => post.title.toLowerCase().includes(query.toLowerCase())), [query, sortedPosts]);
};